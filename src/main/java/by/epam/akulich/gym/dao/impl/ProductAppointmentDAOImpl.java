package by.epam.akulich.gym.dao.impl;

import by.epam.akulich.gym.dao.AppointmentDAO;
import by.epam.akulich.gym.entity.Booking;
import by.epam.akulich.gym.entity.ProductAppointment;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * The class is used for interacting with appointment tables of database.
 *
 * @author Andrey Akulich
 */
public class ProductAppointmentDAOImpl extends AppointmentDAO<ProductAppointment> {

    private static final String SELECT_ALL = "SELECT ProductId, Name FROM Product";
    private static final String SELECT_BY_USER_ID = "SELECT p.Name, a.GramInDay FROM Product p JOIN ProductAppointment a on p.ProductId = a.ProductId WHERE a.BookingId = ?";
    private static final String INSERT = "INSERT INTO ProductAppointment ( BookingId, ProductId, GramInDay ) VALUE ( ?, ?, ? )";

    /**
     * This class represents initialization-on-demand holder idiom for {@link ProductAppointmentDAOImpl}
     */
    private static class ProductDAOImplHolder{
        static final ProductAppointmentDAOImpl INSTANCE = new ProductAppointmentDAOImpl();
    }

    /**
     * Constructs ProductAppointmentDAOImpl.
     */
    private ProductAppointmentDAOImpl(){}

    /**
     * @return ProductAppointmentDAOImpl instance.
     */
    public static ProductAppointmentDAOImpl getInstance() {
        return ProductDAOImplHolder.INSTANCE;
    }

    /**
     * @return SQL query for selecting all {@link ProductAppointment}.
     */
    @Override
    protected String getSelectAllQuery() {
        return SELECT_ALL;
    }

    /**
     * @return SQL query for selecting all {@link ProductAppointment}
     * according {@link Booking} identifier
     */
    @Override
    protected String getSelectByBookingIdQuery() {
        return SELECT_BY_USER_ID;
    }

    /**
     * @return SQL query for inserting new {@link ProductAppointment}
     */
    @Override
    protected String addAppointmentQuery() {
        return INSERT;
    }

    /**
     * Handles {@link ResultSet} of {@link ProductAppointment} and
     * sets result in param list.
     *
     * @param list a list to set appointment
     * @param resultSet a table of data representing a database result set, which
     *                  is usually generated by executing a statement that queries the database.
     * @throws SQLException if a database access error occurs or this method is
     * called on a closed result set
     */
    @Override
    protected void handleSelectByBookingIdResult(List<ProductAppointment> list, ResultSet resultSet) throws SQLException {
        ProductAppointment productAppointment = new ProductAppointment();
        String name = resultSet.getString("Name");
        int gramInDay = resultSet.getInt("GramInDay");
        productAppointment.setName(name);
        productAppointment.setGramInDay(gramInDay);
        list.add(productAppointment);
    }

    /**
     * Handles {@link ResultSet} of {@link ProductAppointment} and
     * sets result in param list.
     *
     * @param list a list to set appointment
     * @param resultSet a table of data representing a database result set, which
     *                  is usually generated by executing a statement that queries the database.
     * @throws SQLException if a database access error occurs or this method is
     * called on a closed result set
     */
    @Override
    protected void handleSelectAllResult(List<ProductAppointment> list, ResultSet resultSet) throws SQLException {
        int productId = resultSet.getInt("ProductId");
        String name = resultSet.getString("Name");
        ProductAppointment productAppointment = new ProductAppointment();
        productAppointment.setId(productId);
        productAppointment.setName(name);
        list.add(productAppointment);
    }

    /**
     * Sets params to {@link PreparedStatement} and adds to batch.
     *
     * @param bookingId {@link Booking} identifier
     * @param productAppointment a type of appointment
     * @param statement an object that represents a precompiled SQL statement
     * @throws SQLException if a database access error occurs or this method is
     * called on a closed result set
     */
    @Override
    protected void handleAdd(int bookingId, ProductAppointment productAppointment, PreparedStatement statement) throws SQLException {
        statement.setInt(1, bookingId);
        statement.setInt(2, productAppointment.getId());
        statement.setInt(3, productAppointment.getGramInDay());
        statement.addBatch();
    }
}
