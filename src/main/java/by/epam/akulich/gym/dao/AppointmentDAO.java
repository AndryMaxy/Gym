package by.epam.akulich.gym.dao;

import by.epam.akulich.gym.connection.ConnectionPool;
import by.epam.akulich.gym.connection.ProxyConnection;
import by.epam.akulich.gym.connection.exception.ConnectionException;
import by.epam.akulich.gym.dao.exception.DAOException;
import by.epam.akulich.gym.dao.exception.ExecutorException;
import by.epam.akulich.gym.entity.Booking;
import by.epam.akulich.gym.entity.User;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * DAO abstract class to interact with appointment tables of database.
 *
 * @param <T> type of concrete appointment
 * @author Andrey Akulich
 */
public abstract class AppointmentDAO<T> {

    /**
     * Instance of {@link Executor}
     */
    private Executor executor = Executor.getInstance();

    /**
     * @return SQL query for selecting all appointments.
     */
    protected abstract String getSelectAllQuery();

    /**
     * @return SQL query for selecting all appointments
     * according booking {@link Booking} identifier
     */
    protected abstract String getSelectByBookingIdQuery();

    /**
     * @return SQL query for inserting new appointments
     */
    protected abstract String addAppointmentQuery();

    /**
     * Handles {@link ResultSet} of concrete appointment and
     * sets result in param list.
     *
     * @param list a list to set appointment
     * @param resultSet a table of data representing a database result set, which
     *                  is usually generated by executing a statement that queries the database.
     * @throws SQLException if a database access error occurs or this method is
     * called on a closed result set
     */
    protected abstract void handleSelectAllResult(List<T> list, ResultSet resultSet) throws SQLException;

    /**
     * Handles {@link ResultSet} of concrete appointment according {@link Booking}
     * identifier then sets result in param list.
     *
     * @param list a list to set appointment
     * @param resultSet a table of data representing a database result set, which
     *                  is usually generated by executing a statement that queries the database.
     * @throws SQLException if a database access error occurs or this method is
     * called on a closed result set
     */
    protected abstract void handleSelectByBookingIdResult(List<T> list, ResultSet resultSet) throws SQLException;

    /**
     * Handles appointment adding.
     *
     * @param bookingId {@link Booking} identifier
     * @param t a type of appointment
     * @param statement an object that represents a precompiled SQL statement
     * @throws SQLException if a database access error occurs or this method is
     * called on a closed result set
     */
    protected abstract void handleAdd(int bookingId, T t, PreparedStatement statement) throws SQLException;

    /**
     * Returns a list of all appointments.
     *
     * @return a list of appointments
     * @throws DAOException if the query failed
     */
    public List<T> getAll() throws DAOException {
        try {
            return executor.executeQuery(getSelectAllQuery(), resultSet -> {
                List<T> ts = new ArrayList<>();
                while (resultSet.next()) {
                    handleSelectAllResult(ts, resultSet);
                }
                return ts;
            });
        } catch (ExecutorException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Returns a list of all appointments according {@link Booking}
     * identifier.
     *
     * @param userId {@link User} identifier
     * @return a list of all appointments according {@link Booking}
     * identifier.
     * @throws DAOException if the query failed
     */
    public List<T> getByBookingId(int userId) throws DAOException {
        try {
            return executor.executeQuery(getSelectByBookingIdQuery(), statement -> {
                statement.setInt(1, userId);
            }, resultSet -> {
                List<T> ts = new ArrayList<>();
                while (resultSet.next()){
                    handleSelectByBookingIdResult(ts, resultSet);
                }
                return ts;
            });
        } catch (ExecutorException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Adds new appointment to database.
     *
     * @param bookingId {@link Booking} identifier
     * @param list a list of appointments
     * @throws DAOException if the query failed
     */
    public void addAppointment(int bookingId, List<T> list) throws DAOException {
        ConnectionPool pool = ConnectionPool.getInstance();
        ProxyConnection connection = null;
        try {
            connection = pool.getConnection();
            connection.setAutoCommit(false);
            PreparedStatement statement = connection.prepareStatement(addAppointmentQuery());
            for (T t : list) {
                handleAdd(bookingId, t, statement);
            }
            statement.executeBatch();
        } catch (SQLException | ConnectionException e) {
            if (connection != null) {
                connection.rollback();
            }
            throw new DAOException(e);
        } finally {
            if (connection != null) {
                connection.setAutoCommit(true);
                connection.close();
            }
        }
    }
}
